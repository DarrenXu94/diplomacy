'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));
var zlib = _interopDefault(require('zlib'));
var request = _interopDefault(require('request-promise-native'));

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var out = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, '__esModule', { value: true });

class Region {
    constructor(id, name, type, supplyCenter) {
        this.id = id;
        this.name = name;
        this.type = type;
        this.supplyCenter = supplyCenter;
        this.attached = new Set();
        this.adjacent = new Set();
    }
    get allAdjacent() {
        let list = [...this.adjacent];
        for (let node of this.attached) {
            list.push(...node.adjacent);
        }
        for (let node of list.slice()) {
            list.push(...node.attached);
        }
        return list;
    }
    get isShore() {
        return (this.type == exports.UnitType.Land &&
            [...this.adjacent].find((a) => a.type == exports.UnitType.Water) != null);
    }
    static areSame(lhs, rhs) {
        return lhs == rhs || lhs.attached.has(rhs);
    }
    static areEqual(lhs, rhs) {
        return lhs == rhs;
    }
}
(function (UnitType) {
    UnitType[UnitType["Land"] = 0] = "Land";
    UnitType[UnitType["Water"] = 1] = "Water";
})(exports.UnitType || (exports.UnitType = {}));
class Unit {
    constructor(region, type, team) {
        this.region = region;
        this.type = type;
        this.team = team;
    }
}
class GameMap {
    constructor(regions) {
        this.regions = regions;
    }
}
class GameState {
    constructor(map, teams) {
        this.map = map;
        this.teams = teams;
        this.units = new Set();
    }
    move(unit, target) {
        this.units.delete(unit);
        this.units.add(new Unit(target, unit.type, unit.team));
    }
}
class HoldOrder {
    constructor(unit) {
        this.unit = unit;
        this.type = "hold";
    }
    toString() {
        return `${this.unit.team} ${this.unit.region.name} hold`;
    }
}
class MoveOrder {
    constructor(unit, target, requireConvoy) {
        this.unit = unit;
        this.target = target;
        this.requireConvoy = requireConvoy;
        this.type = "move";
    }
    toString() {
        let text = `${this.unit.team} ${this.unit.region.name} -> ${this.target.name}`;
        if (this.requireConvoy)
            text += ` via convoy`;
        return text;
    }
}
class SupportOrder {
    constructor(unit, target, attack) {
        this.unit = unit;
        this.target = target;
        this.attack = attack;
        this.type = "support";
    }
    toString() {
        let text = `${this.unit.team} ${this.unit.region.name} support ${this.target.name}`;
        if (this.attack)
            text += ` -> ${this.attack.name}`;
        else
            text += ` to hold`;
        return text;
    }
}
class ConvoyOrder {
    constructor(unit, start, end) {
        this.unit = unit;
        this.start = start;
        this.end = end;
        this.type = "convoy";
    }
    toString() {
        return `${this.unit.team} ${this.unit.region.name} convoy ${this.start.name} to ${this.end.name}`;
    }
}

function resolve(orders) {
    function canMove(unit, dst) {
        if (unit.type == exports.UnitType.Water) {
            if (!unit.region.adjacent.has(dst))
                return false;
            if (dst.type != exports.UnitType.Water && !dst.isShore)
                return false;
            if (dst.type == exports.UnitType.Land && unit.region.type == exports.UnitType.Land) {
                let shore = [...unit.region.adjacent].find(a => a.type == exports.UnitType.Water && dst.adjacent.has(a));
                if (shore == null)
                    return false;
            }
        }
        else {
            if (!unit.region.allAdjacent.includes(dst))
                return false;
            if (dst.type != exports.UnitType.Land)
                return false;
        }
        return true;
    }
    function canReach(unit, dst) {
        if (canMove(unit, dst))
            return true;
        let shore = [...dst.attached].find(a => unit.region.adjacent.has(a));
        return shore != null;
    }
    function isValid(order) {
        if (order.type == 'move') {
            if (Region.areSame(order.unit.region, order.target))
                return false;
            if (order.unit.type == exports.UnitType.Water && !canMove(order.unit, order.target))
                return false;
        }
        return true;
    }
    function findRoutes(order, skip) {
        let convoys = orders.filter(o => o.type == 'convoy'
            && o.unit.region != skip
            && Region.areSame(o.start, order.unit.region)
            && resolve(o));
        let used = convoys.map(() => false);
        let node = order.unit;
        let path = [];
        let paths = [];
        function search() {
            if (canMove(node, order.target) || path.length > 0 && canReach(node, order.target)) {
                paths.push(path.slice());
            }
            for (let next = 0; next < convoys.length; ++next) {
                if (used[next] || !node.region.allAdjacent.includes(convoys[next].unit.region))
                    continue;
                let previous = node;
                used[next] = true;
                path.push(convoys[next]);
                node = convoys[next].unit;
                search();
                node = previous;
                path.pop();
                used[next] = false;
            }
        }
        search();
        if (paths.length == 0)
            return null;
        if (order.requireConvoy && paths.filter(a => a.length > 0).length == 0)
            return null;
        return { convoys, paths };
    }
    function findHoldSupport(order) {
        if (order.type == 'move')
            return [];
        return orders.filter(o => o.type == 'support'
            && Region.areEqual(o.target, order.unit.region)
            && resolve(o));
    }
    function findMoveSupport(order) {
        return orders.filter(o => o.type == 'support'
            && Region.areEqual(o.target, order.unit.region)
            && resolve(o));
    }
    for (let i = 0; i < orders.length; ++i) {
        if (isValid(orders[i]))
            continue;
        let dump = orders[i];
        orders.splice(i, 1, new HoldOrder(dump.unit));
    }
    let assumed = new Set();
    let passed = new Set();
    let checked = new Set();
    let reasons = new Map();
    let stack = [];
    function fail(order, reason) {
        stack.pop();
        if (assumed.size == 0)
            reasons.set(order, reason);
        return false;
    }
    function pass(order) {
        stack.pop();
        if (assumed.size == 0)
            passed.add(order);
        return true;
    }
    function resolve(order, force = false) {
        if (stack[0] == order && stack.every(o => o.type == 'move') && stack.length > 2) {
            return true;
        }
        else if (stack.includes(order)) {
            if (stack.indexOf(order) != stack.lastIndexOf(order))
                throw error('recursive resolve');
        }
        else if (!force && assumed.size == 0) {
            if (checked.has(order))
                return passed.has(order);
            checked.add(order);
        }
        if (assumed.has(order))
            return true;
        stack.push(order);
        if (order.type == 'hold') {
            for (let attack of orders) {
                if (attack.type != 'move' || !Region.areSame(attack.target, order.unit.region))
                    continue;
                if (resolve(attack))
                    return fail(order, `Dislodged by '${attack}'`);
            }
            return pass(order);
        }
        if (order.type == 'move') {
            let current = orders.find(o => Region.areSame(o.unit.region, order.target));
            let best = [];
            let strength = 0;
            let bestDislodge = [];
            let dislodgeStrength = 0;
            let forceResolved = null;
            for (let attack of orders) {
                if (attack.type != 'move' || !Region.areSame(attack.target, order.target))
                    continue;
                let routes = findRoutes(attack);
                if (routes == null) {
                    if (attack == order)
                        return fail(order, `No valid route`);
                    continue;
                }
                let support = findMoveSupport(attack);
                if (current && current.type == 'move' && Region.areSame(current.target, attack.unit.region)) {
                    // prevent dislodged unit from bouncing with other units entering dislodger's region
                    let enemies = support.filter(o => o.unit.team != current.unit.team);
                    let currentRoutes = findRoutes(current);
                    // to fail to swap places, both must have no routes via convoy
                    if (currentRoutes == null) {
                        if (enemies.length == 0) {
                            if (attack == order)
                                return fail(order, `Overpowered by '${current}' with support '' vs '${enemies.join("', '")}'`);
                            continue;
                        }
                    }
                    else if (currentRoutes.paths.filter(o => o.length > 0).length == 0 && routes.paths.filter(o => o.length > 0).length == 0) {
                        let currentAttack = findMoveSupport(current).filter(o => o.unit.team != attack.unit.team);
                        if (currentAttack.length > enemies.length) {
                            if (attack == order)
                                return fail(order, `Overpowered by '${current}' with support '${currentAttack.join("', '")}' vs '${enemies.join("', '")}'`);
                            continue;
                        }
                    }
                    else {
                        forceResolved = attack;
                    }
                }
                if (support.length > strength) {
                    best = [attack];
                    strength = support.length;
                }
                else if (support.length == strength) {
                    best.push(attack);
                }
                if (current && attack.unit.team != current.unit.team) {
                    let enemies = support.filter(o => o.unit.team != current.unit.team);
                    if (enemies.length > dislodgeStrength) {
                        bestDislodge = [attack];
                        dislodgeStrength = enemies.length;
                    }
                    else if (enemies.length == dislodgeStrength) {
                        bestDislodge.push(attack);
                    }
                }
            }
            if (!best.includes(order))
                return fail(order, `Overpowered by '${best.join("', '")}' with strength ${strength} vs ${findMoveSupport(order).length} `);
            if (best.length != 1)
                return fail(order, `Standoff with '${best.join("', '")}' with strength ${strength} `);
            if (current && best[0] != forceResolved) {
                if (current.type == 'move' && Region.areSame(current.target, best[0].unit.region)) {
                    if (bestDislodge.length != 1 || best[0] != bestDislodge[0])
                        return fail(order, `Avoiding self-dislodgement`);
                    let currentAttack = findMoveSupport(current).filter(o => o.unit.team != best[0].unit.team);
                    if (currentAttack.length == dislodgeStrength)
                        return fail(order, `Balanced faceoff '${currentAttack.join("', '")}' vs '${findMoveSupport(order).filter(o => o.unit.team != current.unit.team).join("', '")}'`);
                    if (currentAttack.length > dislodgeStrength)
                        throw error('Failed to filter out dislodged attack');
                }
                else if (current.type != 'move' || !resolve(current)) {
                    if (bestDislodge.length != 1 || best[0] != bestDislodge[0])
                        return fail(order, `Avoiding self-dislodgement`);
                    if (dislodgeStrength == 0)
                        return fail(order, `Held with ?? vs nothing`);
                    let holdSupport = findHoldSupport(current);
                    if (holdSupport.length >= dislodgeStrength)
                        return fail(order, `Held with '${holdSupport.join(', ')}' vs '${findMoveSupport(order).filter(o => o.unit.team != current.unit.team).join("', '")}'`);
                }
            }
            return pass(order);
        }
        if (order.type == 'convoy') {
            if (order.unit.region.type != exports.UnitType.Water)
                return fail(order, 'Only water units can convoy');
            let target = orders.find(o => o.type == 'move'
                && o.unit.type == exports.UnitType.Land
                && Region.areSame(o.unit.region, order.start)
                && Region.areSame(o.target, order.end));
            if (target == null)
                return fail(order, 'No matching target');
            for (let attack of orders) {
                if (attack.type != 'move' || !Region.areSame(attack.target, order.unit.region))
                    continue;
                if (resolve(attack))
                    return fail(order, `Dislodged by '${attack}'`);
            }
            return pass(order);
        }
        if (order.type == 'support') {
            let supportee = orders.find(o => Region.areSame(o.unit.region, order.target));
            if (supportee == null)
                return fail(order, 'No matching target');
            if (order.attack) {
                if (supportee.type != 'move')
                    return fail(order, `Support attacked ${order.attack.name} target was ${supportee}`);
                if (!canReach(order.unit, order.attack))
                    return fail(order, `Support attacked ${order.attack.name} but could not reach`);
                if (!Region.areEqual(supportee.target, order.attack))
                    return fail(order, `Support attacked ${order.attack.name} but target attacked ${supportee.target}`);
            }
            else {
                if (supportee.type == 'move')
                    return fail(order, `Support held but target was ${supportee}`);
                if (!canReach(order.unit, order.target))
                    return fail(order, `Support held ${order.target.name} but could not reach`);
            }
            for (let attack of orders) {
                if (attack.type != 'move' || !Region.areSame(attack.target, order.unit.region))
                    continue;
                if (order.unit.team == attack.unit.team)
                    continue;
                if (supportee.type == 'move') {
                    if (Region.areSame(supportee.target, attack.unit.region)) {
                        // if it is from the target region of the supported attack,
                        // it can only cut support by dislodging
                        if (resolve(attack))
                            return fail(order, `Dislodged by '${attack}'`);
                    }
                    else {
                        // if it is convoyed by the target region of the supported attack,
                        // it can only cut support if it has an alternate path
                        let routes = findRoutes(attack, supportee.target);
                        if (routes != null)
                            return fail(order, `Disrupted by '${attack}'`);
                        // or if the support doesn't break the convoy
                        assumed.add(order);
                        if (resolve(attack)) {
                            assumed.delete(order);
                            return fail(order, `Dislodged by '${attack}'`);
                        }
                        assumed.delete(order);
                    }
                }
                else {
                    let routes = findRoutes(attack);
                    if (routes != null)
                        return fail(order, `Disrupted by '${attack}'`);
                }
            }
            return pass(order);
        }
        throw error(`Invalid order`);
    }
    let evicted = [];
    let resolved = [];
    for (let order of orders) {
        let valid = resolve(order);
        if (order.type == 'move' && valid) {
            resolved.push(order);
        }
        else {
            for (let attack of orders) {
                if (attack.type != 'move' || !Region.areSame(attack.target, order.unit.region))
                    continue;
                if (resolve(attack)) {
                    evicted.push(order.unit);
                    if (!reasons.has(order)) {
                        debugger;
                        resolve(order, true);
                        debugger;
                        resolve(attack, true);
                    }
                }
            }
        }
    }
    return { resolved, evicted, reasons };
}
function error(msg) {
    debugger;
    return new Error(msg);
}

var formatter = {
    header(obj, config) {
        if (obj instanceof MoveOrder || obj instanceof HoldOrder || obj instanceof SupportOrder || obj instanceof ConvoyOrder) {
            return ["span", {}, obj.toString()];
        }
        if (obj instanceof Unit) {
            return ["span", {}, `${obj.team} ${obj.type == exports.UnitType.Water ? 'fleet' : 'army'} in ${obj.region.name}`];
        }
        return null;
    },
    hasBody(obj, config) {
        return false;
    },
    body(obj, config) {
    }
};

const LAND = exports.UnitType.Land;
const WATER = exports.UnitType.Water;
const supplyCenters = [
    "RUM",
    "BUL",
    "SER",
    "POR",
    "SPA",
    "SWE",
    "NWY",
    "DEN",
    "HOL",
    "BEL",
    "TUN",
    "GRE",
    "BUD",
    "TRI",
    "VIE",
    "EDI",
    "LVP",
    "LON",
    "BRE",
    "MAR",
    "PAR",
    "BER",
    "KIE",
    "MUN",
    "NAP",
    "ROM",
    "VEN",
    "MOS",
    "STP",
    "SEV",
    "WAR",
    "ANK",
    "CON",
    "SMY",
];
function n(id, name, type) {
    const isSupplyCenter = supplyCenters.includes(id);
    return new Region(id, name, type, isSupplyCenter);
}
// austria
let BOH = n("BOH", "Bohemia", LAND);
let BUD = n("BUD", "Budapest", LAND);
let GAL = n("GAL", "Galicia", LAND);
let TRI = n("TRI", "Trieste", LAND);
let TYR = n("TYR", "Tyrolia", LAND);
let VIE = n("VIE", "Vienna", LAND);
// england
let CLY = n("CLY", "Clyde", LAND);
let EDI = n("EDI", "Edinburgh", LAND);
let LVP = n("LVP", "Liverpool", LAND);
let LON = n("LON", "London", LAND);
let WAL = n("WAL", "Wales", LAND);
let YOR = n("YOR", "Yorkshire", LAND);
// france
let BRE = n("BRE", "Brest", LAND);
let BUR = n("BUR", "Burgundy", LAND);
let GAS = n("GAS", "Gascony", LAND);
let MAR = n("MAR", "Marseilles", LAND);
let PAR = n("PAR", "Paris", LAND);
let PIC = n("PIC", "Picardy", LAND);
// germany
let BER = n("BER", "Berlin", LAND);
let KIE = n("KIE", "Kiel", LAND);
let MUN = n("MUN", "Munich", LAND);
let PRU = n("PRU", "Prussia", LAND);
let RUH = n("RUH", "Ruhr", LAND);
let SIL = n("SIL", "Silesia", LAND);
// italy
let APU = n("APU", "Apulia", LAND);
let NAP = n("NAP", "Naples", LAND);
let PIE = n("PIE", "Piedmont", LAND);
let ROM = n("ROM", "Rome", LAND);
let TUS = n("TUS", "Tuscany", LAND);
let VEN = n("VEN", "Venice", LAND);
// russia
let FIN = n("FIN", "Finland", LAND);
let LVN = n("LVN", "Livonia", LAND);
let MOS = n("MOS", "Moscow", LAND);
let SEV = n("SEV", "Sevastopol", LAND);
let STP = n("STP", "St. Petersburg", LAND);
let UKR = n("UKR", "Ukraine", LAND);
let WAR = n("WAR", "Warsaw", LAND);
// turkey
let ANK = n("ANK", "Ankara", LAND);
let ARM = n("ARM", "Armenia", LAND);
let CON = n("CON", "Constantinople", LAND);
let SMY = n("SMY", "Smyrna", LAND);
let SYR = n("SYR", "Syria", LAND);
// neutral
let ALB = n("ALB", "Albania", LAND);
let BEL = n("BEL", "Belgium", LAND);
let BUL = n("BUL", "Bulgaria", LAND);
let DEN = n("DEN", "Denmark", LAND);
let GRE = n("GRE", "Greece", LAND);
let HOL = n("HOL", "Holland", LAND);
let NWY = n("NWY", "Norway", LAND);
let NAF = n("NAF", "North Africa", LAND);
let POR = n("POR", "Portugal", LAND);
let RUM = n("RUM", "Rumania", LAND);
let SER = n("SER", "Serbia", LAND);
let SPA = n("SPA", "Spain", LAND);
let SWE = n("SWE", "Sweden", LAND);
let TUN = n("TUN", "Tunis", LAND);
// water
let ADR = n("ADR", "Adriatic Sea", WATER);
let AEG = n("AEG", "Aegean Sea", WATER);
let BAL = n("BAL", "Baltic Sea", WATER);
let BAR = n("BAR", "Barents Sea", WATER);
let BLA = n("BLA", "Black Sea", WATER);
let EAS = n("EAS", "Eastern Mediterranean", WATER);
let ENG = n("ENG", "English Channel", WATER);
let BOT = n("BOT", "Gulf of Bothnia", WATER);
let GOL = n("GOL", "Gulf of Lyon", WATER);
let HEL = n("HEL", "Helgoland Bight", WATER);
let ION = n("ION", "Ionian Sea", WATER);
let IRI = n("IRI", "Irish Sea", WATER);
let MID = n("MID", "Mid-Atlantic Ocean", WATER);
let NAT = n("NAT", "North Atlantic Ocean", WATER);
let NTH = n("NTH", "North Sea", WATER);
let NRG = n("NRG", "Norwegian Sea", WATER);
let SKA = n("SKA", "Skagerrack", WATER);
let TYN = n("TYN", "Tyrrhenian Sea", WATER);
let WES = n("WES", "Western Mediterranean", WATER);
let STP_NORTH = n("STPN", "St. Petersburg (North Coast)", LAND);
let STP_SOUTH = n("STPS", "St. Petersburg (South Coast)", LAND);
let SPA_NORTH = n("SPAN", "Spain (North Coast)", LAND);
let SPA_SOUTH = n("SPAS", "Spain (South Coast)", LAND);
let BUL_NORTH = n("BULE", "Bulgaria (East Coast)", LAND);
let BUL_SOUTH = n("BULS", "Bulgaria (South Coast)", LAND);
function border(node, adjacent) {
    for (let other of adjacent)
        node.adjacent.add(other);
}
function attach(node, attached) {
    let all = [node, ...attached];
    for (let region of all) {
        for (let other of all) {
            if (other == region)
                continue;
            region.attached.add(other);
        }
    }
}
border(STP_NORTH, [BAR, NWY]);
attach(STP, [STP_SOUTH, STP_NORTH]);
border(STP_SOUTH, [BOT, LVN, FIN]);
border(BUL_NORTH, [BLA, CON, RUM]);
attach(BUL, [BUL_SOUTH, BUL_NORTH]);
border(BUL_SOUTH, [AEG, GRE, CON]);
border(SPA_NORTH, [MID, POR, GAS]);
attach(SPA, [SPA_SOUTH, SPA_NORTH]);
border(SPA_SOUTH, [GOL, WES, MID, POR, MAR]);
border(NAT, [NRG, CLY, LVP, IRI, MID]);
border(NRG, [BAR, NWY, NTH, EDI, CLY, NAT]);
border(CLY, [NRG, EDI, LVP, NAT]);
border(LVP, [CLY, EDI, YOR, WAL, IRI, NAT]);
border(IRI, [NAT, LVP, WAL, ENG, MID]);
border(MID, [NAT, IRI, ENG, BRE, GAS, POR, WES, NAF, SPA_NORTH, SPA_SOUTH]);
border(BAR, [NRG, NWY, STP_NORTH]);
border(NWY, [NRG, BAR, STP, FIN, SWE, SKA, NTH, STP_NORTH]);
border(NTH, [NRG, NWY, SKA, DEN, HEL, HOL, BEL, ENG, LON, YOR, EDI]);
border(EDI, [NRG, NTH, YOR, LVP, CLY]);
border(YOR, [EDI, NTH, LON, WAL, LVP]);
border(WAL, [LVP, YOR, LON, ENG, IRI]);
border(ENG, [IRI, WAL, LON, NTH, BEL, PIC, BRE, MID]);
border(BRE, [ENG, PIC, PAR, GAS, MID]);
border(GAS, [BRE, PAR, BUR, MAR, SPA, MID]);
border(SPA, [GAS, MAR, POR]);
border(POR, [MID, SPA, SPA_NORTH, SPA_SOUTH]);
border(WES, [GOL, TYN, TUN, NAF, MID, SPA_SOUTH]);
border(NAF, [MID, WES, TUN]);
border(STP, [NWY, MOS, LVN, FIN]);
border(SWE, [NWY, FIN, BOT, BAL, DEN, SKA]);
border(FIN, [NWY, STP, BOT, SWE, STP_SOUTH]);
border(SKA, [NWY, SWE, DEN, NTH]);
border(DEN, [SKA, SWE, BAL, KIE, HEL, NTH]);
border(HEL, [NTH, DEN, KIE, HOL]);
border(HOL, [NTH, HEL, KIE, RUH, BEL]);
border(BEL, [ENG, NTH, HOL, RUH, BUR, PIC]);
border(LON, [YOR, NTH, ENG, WAL]);
border(PIC, [ENG, BEL, BUR, PAR, BRE]);
border(PAR, [PIC, BUR, GAS, BRE]);
border(GAS, [BRE, PAR, BUR, MAR, SPA, MID, SPA_NORTH]);
border(BUR, [PAR, PIC, BEL, RUH, MUN, MAR, GAS]);
border(MAR, [GAS, BUR, PIE, GOL, SPA, SPA_SOUTH]);
border(GOL, [MAR, PIE, TUS, TYN, WES, SPA_SOUTH]);
border(TYN, [TUS, ROM, NAP, ION, TUN, WES, GOL]);
border(TUN, [WES, TYN, ION, NAF]);
border(MOS, [STP, SEV, UKR, WAR, LVN]);
border(LVN, [BOT, STP, MOS, WAR, PRU, BAL, STP_SOUTH]);
border(BOT, [SWE, FIN, LVN, BAL, STP_SOUTH]);
border(BAL, [DEN, SWE, BOT, LVN, PRU, BER, KIE]);
border(KIE, [HEL, DEN, BAL, BER, MUN, RUH, HOL]);
border(RUH, [BEL, HOL, KIE, MUN, BUR]);
border(PIE, [TYR, VEN, TUS, GOL, MAR]);
border(TUS, [PIE, VEN, ROM, TYN, GOL]);
border(ROM, [TUS, VEN, APU, NAP, TYN]);
border(NAP, [ROM, APU, ION, TYN]);
border(ION, [TYN, NAP, APU, ADR, ALB, GRE, AEG, EAS, TUN]);
border(SEV, [UKR, MOS, ARM, BLA, RUM]);
border(UKR, [MOS, SEV, RUM, GAL, WAR]);
border(WAR, [PRU, LVN, MOS, UKR, GAL, SIL]);
border(PRU, [BAL, LVN, WAR, SIL, BER]);
border(BER, [BAL, PRU, SIL, MUN, KIE]);
border(MUN, [RUH, KIE, BER, SIL, BOH, TYR, BUR]);
border(TYR, [MUN, BOH, VIE, TRI, VEN, PIE]);
border(VEN, [TYR, TRI, ADR, APU, ROM, TUS, PIE]);
border(APU, [VEN, ADR, ION, NAP, ROM]);
border(ADR, [VEN, TRI, ALB, ION, APU]);
border(ALB, [TRI, SER, GRE, ION, ADR]);
border(GRE, [ALB, SER, BUL, AEG, ION, BUL_SOUTH]);
border(AEG, [GRE, CON, SMY, EAS, ION, BUL_SOUTH]);
border(EAS, [AEG, SMY, SYR, ION]);
border(ARM, [SEV, SYR, SMY, ANK, BLA]);
border(BLA, [RUM, SEV, ARM, ANK, CON, BUL_NORTH]);
border(RUM, [BUD, GAL, UKR, SEV, BLA, BUL, SER, BUL_NORTH]);
border(GAL, [BOH, SIL, WAR, UKR, RUM, BUD, VIE]);
border(SIL, [BER, PRU, WAR, GAL, BOH, MUN]);
border(BOH, [MUN, SIL, GAL, VIE, TYR]);
border(VIE, [BOH, GAL, BUD, TRI, TYR]);
border(TRI, [TYR, VIE, BUD, SER, ALB, ADR, VEN]);
border(SER, [BUD, RUM, BUL, GRE, ALB, TRI]);
border(BUL, [RUM, CON, GRE, SER]);
border(CON, [BUL, BLA, ANK, SMY, AEG, BUL_SOUTH, BUL_NORTH]);
border(SMY, [CON, ANK, ARM, SYR, EAS, AEG]);
border(SYR, [SMY, ARM, EAS]);
border(BUD, [VIE, GAL, RUM, SER, TRI]);
border(ANK, [BLA, ARM, SMY, CON]);
const map = new GameMap([
    BOH,
    BUD,
    GAL,
    TRI,
    TYR,
    VIE,
    CLY,
    EDI,
    LVP,
    LON,
    WAL,
    YOR,
    BRE,
    BUR,
    GAS,
    MAR,
    PAR,
    PIC,
    BER,
    KIE,
    MUN,
    PRU,
    RUH,
    SIL,
    APU,
    NAP,
    PIE,
    ROM,
    TUS,
    VEN,
    FIN,
    LVN,
    MOS,
    SEV,
    STP,
    UKR,
    WAR,
    ANK,
    ARM,
    CON,
    SMY,
    SYR,
    ALB,
    BEL,
    BUL,
    DEN,
    GRE,
    HOL,
    NWY,
    NAF,
    POR,
    RUM,
    SER,
    SPA,
    SWE,
    TUN,
    ADR,
    AEG,
    BAL,
    BAR,
    BLA,
    EAS,
    ENG,
    BOT,
    GOL,
    HEL,
    ION,
    IRI,
    MID,
    NAT,
    NTH,
    NRG,
    SKA,
    TYN,
    WES,
    STP_NORTH,
    STP_SOUTH,
    SPA_NORTH,
    SPA_SOUTH,
    BUL_NORTH,
    BUL_SOUTH,
]);
const allRegions = {
    BOH,
    BUD,
    GAL,
    TRI,
    TYR,
    VIE,
    CLY,
    EDI,
    LVP,
    LON,
    WAL,
    YOR,
    BRE,
    BUR,
    GAS,
    MAR,
    PAR,
    PIC,
    BER,
    KIE,
    MUN,
    PRU,
    RUH,
    SIL,
    APU,
    NAP,
    PIE,
    ROM,
    TUS,
    VEN,
    FIN,
    LVN,
    MOS,
    SEV,
    STP,
    UKR,
    WAR,
    ANK,
    ARM,
    CON,
    SMY,
    SYR,
    ALB,
    BEL,
    BUL,
    DEN,
    GRE,
    HOL,
    NWY,
    NAF,
    POR,
    RUM,
    SER,
    SPA,
    SWE,
    TUN,
    ADR,
    AEG,
    BAL,
    BAR,
    BLA,
    EAS,
    ENG,
    BOT,
    GOL,
    HEL,
    ION,
    IRI,
    MID,
    NAT,
    NTH,
    NRG,
    SKA,
    TYN,
    WES,
    STP_NORTH,
    STP_SOUTH,
    SPA_NORTH,
    SPA_SOUTH,
    BUL_NORTH,
    BUL_SOUTH,
};

const maps = {
    standard: {
        map: map,
        regions: allRegions,
    },
};

exports.ConvoyOrder = ConvoyOrder;
exports.GameMap = GameMap;
exports.GameState = GameState;
exports.HoldOrder = HoldOrder;
exports.MoveOrder = MoveOrder;
exports.Region = Region;
exports.SupportOrder = SupportOrder;
exports.Unit = Unit;
exports.formatter = formatter;
exports.maps = maps;
exports.resolve = resolve;

});

unwrapExports(out);
var out_1 = out.UnitType;
var out_2 = out.ConvoyOrder;
var out_3 = out.GameMap;
var out_4 = out.GameState;
var out_5 = out.HoldOrder;
var out_6 = out.MoveOrder;
var out_7 = out.Region;
var out_8 = out.SupportOrder;
var out_9 = out.Unit;
var out_10 = out.formatter;
var out_11 = out.maps;
var out_12 = out.resolve;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function error(msg) {
    debugger;
    return new Error(msg);
}
function* matches(regex, target) {
    let copy = new RegExp(regex, 'g');
    let match;
    while (match = copy.exec(target))
        yield match;
}

const session_key = `mmqci5vml3dt5gnq5m0adign46`;
function playdiplomacy(path, phpId) {
    return __awaiter(this, void 0, void 0, function* () {
        let url = `https://www.playdiplomacy.com${path}`;
        try {
            let response = yield request(url, {
                headers: { cookie: `PHPSESSID=${phpId}` },
                resolveWithFullResponse: true,
                followRedirect: false,
            });
            if (response.statusCode != 200)
                throw error("invalid status code");
            return response.body;
        }
        catch (e) {
            debugger;
            throw e;
        }
    });
}
function game_history(query, phpId) {
    return __awaiter(this, void 0, void 0, function* () {
        let data;
        //   try {
        //     data = fs.readFileSync(cache, "utf8");
        //   } catch (e) {
        data = yield playdiplomacy(`/game_history.php?${query}`, phpId);
        //   await fs.writeFile(cache, data, "utf8");
        //   }
        return data;
    });
}
function get_history(id, phase, date, phpId) {
    return __awaiter(this, void 0, void 0, function* () {
        let query = `game_id=${id}&phase=${phase}&gdate=${date}`;
        let data = yield game_history(query, phpId);
        let found = false;
        let inputs = {};
        for (let match of matches(/<b>(\w+)<\/b><ul>(.*?)<\/ul>/, data)) {
            let team = match[1];
            let list = [];
            for (let part of matches(/<li>(.*?)<\/li>/, match[2])) {
                list.push(part[1]);
            }
            if (list.length == 0)
                continue;
            found = true;
            inputs[team] = list;
        }
        if (found)
            return inputs;
        return undefined;
    });
}
function get_game(id, phpId) {
    return __awaiter(this, void 0, void 0, function* () {
        let turns = [];
        let history = yield game_history(`game_id=${id}`, phpId);
        for (let content of history.split("</br></br>")) {
            let date = turns.length;
            let turn = { orders: {} };
            let found = false;
            for (let match of matches(/<b><a href='game_history\.php\?game_id=(\d+)&phase=(\w)&gdate=(\d+)'>[^<]+<\/a><\/b>&nbsp;&nbsp;/, content)) {
                if (id != parseInt(match[1]))
                    throw error(`Failed to parse game history: ${id}`);
                if (date != parseInt(match[3]))
                    throw error(`Failed to parse game history: ${id}`);
                let phase = match[2];
                let inputs = yield get_history(id, phase, date, phpId);
                if (inputs == null && phase != "O")
                    continue;
                found = true;
                switch (phase) {
                    case "O":
                        turn.orders = inputs || {};
                        break;
                    case "R":
                        turn.retreats = inputs;
                        break;
                    case "B":
                        turn.builds = inputs;
                        break;
                }
            }
            if (!found)
                continue;
            turns.push(turn);
        }
        return turns;
    });
}
function read_game(raw) {
    let data = zlib.gunzipSync(raw);
    let game = JSON.parse(data.toString("utf8"));
    for (let turn of game) {
        if (turn.builds && Object.keys(turn.builds).length == 0) {
            delete turn.builds;
        }
        if (turn.retreats && Object.keys(turn.retreats).length == 0) {
            delete turn.retreats;
        }
        if (Object.keys(turn.orders).length == 0) {
            // sometimes games have an empty last turn with no orders
            if (turn.builds || turn.retreats || game.indexOf(turn) + 1 != game.length)
                throw error(`missing orders: ${game.indexOf(turn)}`);
            game.pop();
            break;
        }
    }
    return game;
}
function write_game(turns) {
    let data = Buffer.from(JSON.stringify(turns), "utf8");
    return zlib.gzipSync(data);
}
// export async function run() {
//   fs.mkdirpSync("data");
//   fs.mkdirpSync("cache");
//   let errors = 0;
//   let oldKnown;
//   let newKnown = { newest: 0, count: 0 };
//   try {
//     oldKnown = fs.readJSONSync("data/known.json") as typeof newKnown;
//     console.log(`known: ${oldKnown.newest} +${oldKnown.count}`);
//   } catch (e) {
//     oldKnown = null;
//   }
//   let skip = 0;
//   for (let i = 1; i <= 1000 && errors < 10; ++i) {
//     if (skip >= 15) {
//       skip -= 15;
//       continue;
//     }
//     console.log(`fetching page ${i}`);
//     let ids = await get_page(i);
//     for (let id of ids) {
//       if (newKnown.newest == 0) newKnown.newest = id;
//       if (oldKnown && id == oldKnown.newest) {
//         skip = oldKnown.count;
//         newKnown.count += oldKnown.count;
//         oldKnown = null;
//       }
//       if (skip >= 1) {
//         skip -= 1;
//         console.log(`skipping game ${id}`);
//         continue;
//       }
//       console.log(`fetching game ${id}`);
//       try {
//         let outputFile = `data/${id}`;
//         if (!fs.pathExistsSync(outputFile)) {
//           let game = await get_game(id, session_key);
//           let data = write_game(game);
//           let parsed = read_game(data);
//           if (JSON.stringify(parsed) != JSON.stringify(game))
//             throw error("game encoding failed");
//           fs.writeFileSync(outputFile, data);
//         }
//         if (errors == 0) {
//           ++newKnown.count;
//         }
//       } catch (e) {
//         ++errors;
//         fs.appendFileSync("errors.txt", `${id} ${e}`, "utf8");
//         console.error(id, e);
//       }
//     }
//     if (oldKnown == null) {
//       fs.writeJSONSync("data/known.json", newKnown);
//       console.log(`known: ${newKnown.newest} +${newKnown.count}`);
//     }
//   }
// }
// export async function check() {
//   fs.mkdirpSync("data");
//   fs.mkdirpSync("cache");
//   let count = 0;
//   let allIds = fs.readdirSync("data");
//   for (let id of allIds) {
//     if (id == "known.json") continue;
//     let game = read_game(fs.readFileSync(`data/${id}`));
//     let turns = 0;
//     let history = await game_history(`game_id=${id}`, session_key);
//     for (let content of history.split("</br></br>")) {
//       let found = false;
//       for (let _ of matches(
//         /<b><a href='game_history\.php\?game_id=(\d+)&phase=(\w)&gdate=(\d+)'>[^<]+<\/a><\/b>&nbsp;&nbsp;/,
//         content
//       )) {
//         found = true;
//         break;
//       }
//       if (!found) continue;
//       ++turns;
//     }
//     if (turns != game.length) {
//       game = await get_game(parseInt(id), session_key);
//       if (turns != game.length) {
//         throw error(`Mismatch: ${id} ${turns} ${game.length}`);
//       }
//     }
//     let builds = 0;
//     let retreats = 0;
//     for (let i = 0; i < game.length; ++i) {
//       if (game[i].builds) builds++;
//       if (game[i].retreats) retreats++;
//     }
//     if (builds == 0 && retreats == 0) {
//       game = await get_game(parseInt(id), session_key);
//       console.log(
//         `${(++count).toString().padStart(allIds.length.toString().length)} / ${
//           allIds.length
//         } ${id} ${turns} *`
//       );
//     } else {
//       console.log(
//         `${(++count).toString().padStart(allIds.length.toString().length)} / ${
//           allIds.length
//         } ${id} ${turns}`
//       );
//     }
//     let data = write_game(game);
//     fs.writeFileSync(`data/${id}`, data);
//   }
// }
function parse_orders(game, inputs) {
    let isNew = game.units.size == 0;
    let fleets = new Set([
        out_11.standard.regions.LON,
        out_11.standard.regions.EDI,
        out_11.standard.regions.BRE,
        out_11.standard.regions.NAP,
        out_11.standard.regions.KIE,
        out_11.standard.regions.TRI,
        out_11.standard.regions.ANK,
        out_11.standard.regions.SEV,
        out_11.standard.regions.STP_SOUTH,
    ]);
    let orders = [];
    let resolved = [];
    for (let team in inputs) {
        for (let raw of inputs[team]) {
            let match = /(.*?)(HOLD|MOVE|SUPPORT|CONVOY)(.*)->(.*)/.exec(raw);
            if (match == null)
                throw error(`failed to match order: ${raw}`);
            let regionName = match[1].trim();
            let op = match[2];
            let args = match[3].trim();
            let result = match[4].trim();
            if (result == "Invalid order or syntax error")
                continue;
            let region = game.map.regions.find((r) => r.name == regionName);
            if (region == null)
                throw error(`failed to find region for order: ${raw} `);
            let unit = [...game.units].find((u) => u.region == region && u.team == team);
            if (unit == null) {
                if (isNew)
                    game.units.add((unit = new out_9(region, fleets.has(region) ? out_1.Water : out_1.Land, team)));
                else
                    throw error(`Unit does not exist: ${team} ${region.name} `);
            }
            let order;
            if (op == "HOLD" || result == "Illegal order replaced with Hold order") {
                order = new out_5(unit);
            }
            else if (op == "MOVE") {
                let moveArgs = args.split("VIA");
                let rawTarget = moveArgs[0].trim();
                let target = out_11.standard.map.regions.find((r) => r.name == rawTarget);
                if (target == null)
                    throw error(`failed to find target region for move order: ${args} `);
                order = new out_6(unit, target, moveArgs.length > 1);
                if (result == "resolved") {
                    resolved.push(order);
                }
            }
            else if (op == "SUPPORT") {
                let [rawSrc, rawDst] = args.split(" to "); // 'X to hold' or 'X to Y'
                let src = out_11.standard.map.regions.find((r) => r.name == rawSrc);
                if (src == null)
                    throw error(`failed to find target region for support order: ${rawSrc} `);
                if (rawDst == "hold")
                    order = new out_8(unit, src);
                else {
                    let dst = out_11.standard.map.regions.find((r) => r.name == rawDst);
                    if (dst == null)
                        throw error(`failed to find attack region for support order: ${rawDst} `);
                    order = new out_8(unit, src, dst);
                }
            }
            else if (op == "CONVOY") {
                let [rawSrc, rawDst] = args.split(" to "); // 'X to Y'
                let src = out_11.standard.map.regions.find((r) => r.name == rawSrc);
                if (src == null)
                    throw error(`failed to find start region for convoy order: ${rawSrc} `);
                let dst = out_11.standard.map.regions.find((r) => r.name == rawDst);
                if (dst == null)
                    throw error(`failed to find end region for convoy order: ${rawDst} `);
                order = new out_2(unit, src, dst);
            }
            else {
                throw error(`invalid order: ${op}`);
            }
            orders.push(order);
        }
    }
    return { orders, resolved };
}
function parse_retreats(evicted, inputs) {
    let retreats = [];
    for (let team in inputs) {
        for (let raw of inputs[team]) {
            let match = /((.*)RETREAT(.*)|(.*)DESTROY)\s+->(.*)/.exec(raw);
            if (match == null)
                throw error(`failed to match retreat: ${raw} `);
            let result = match[5].trim();
            if (match[2]) {
                let rawSrc = match[2].trim();
                let rawDst = match[3].trim();
                let src = out_11.standard.map.regions.find((r) => r.name == rawSrc);
                if (src == null)
                    throw error(`failed to find region for retreat: ${raw}`);
                let dst = out_11.standard.map.regions.find((r) => r.name == rawDst);
                if (dst == null)
                    throw error(`failed to find region for retreat: ${raw}`);
                let unit = evicted.find((u) => u.region == src && u.team == team);
                if (unit == null)
                    throw error(`failed to find unit for retreat: ${raw} ${team}`);
                retreats.push({ unit, target: dst, resolved: result == "resolved" });
            }
            else {
                let rawRegion = match[4].trim();
                let region = out_11.standard.map.regions.find((r) => r.name == rawRegion);
                if (region == null)
                    throw error(`failed to find region for retreat: ${raw}`);
                let unit = [...evicted].find((u) => u.region == region && u.team == team);
                if (unit == null)
                    throw error(`failed to find unit for retreat: ${raw} ${team}`);
                retreats.push({ unit, target: null, resolved: result == "resolved" });
            }
        }
    }
    return retreats;
}
function parse_builds(game, inputs) {
    let builds = [];
    for (let team in inputs) {
        for (let raw of inputs[team]) {
            let match = /(BUILD\s+(fleet|army)\s+(.*)|(.*)DESTROY)\s+->(.*)/.exec(raw);
            if (match == null)
                throw error(`failed to match build: ${raw}`);
            let result = match[5].trim();
            if (match[2]) {
                let type = match[2].trim();
                let rawRegion = match[3].trim();
                let region = out_11.standard.map.regions.find((r) => r.name == rawRegion);
                if (region == null)
                    throw error(`failed to find region for build: ${raw}`);
                let unit = new out_9(region, type == "fleet" ? out_1.Water : out_1.Land, team);
                builds.push({ unit, resolved: result == "resolved" });
            }
            else {
                let rawRegion = match[4].trim();
                let region = out_11.standard.map.regions.find((r) => r.name == rawRegion);
                if (region == null)
                    throw error(`failed to find region for build: ${raw}`);
                let unit = [...game.units].find((u) => u.region == region && u.team == team);
                if (unit == null) {
                    if (result != "resolved")
                        continue;
                    else
                        throw error(`failed to find unit for build: ${raw} ${team}`);
                }
                builds.push({ unit, resolved: result == "resolved" });
            }
        }
    }
    return builds;
}
// export async function fetchGameData() {
//   // get game history phase O
//   const inputs = await get_history(221053, "O", 0, session_key);
//   console.log(inputs);
//   fs.writeFileSync("game-data.json", JSON.stringify(inputs, null, 2));
// }
function fetchSingleGame(id, phpId = session_key) {
    return __awaiter(this, void 0, void 0, function* () {
        const game = yield get_game(id, phpId);
        let data = write_game(game);
        let parsed = read_game(data);
        return parsed;
    });
}
function getSessionKey() {
    return __awaiter(this, void 0, void 0, function* () {
        console.log("get session key");
        const options = {
            uri: "https://www.playdiplomacy.com",
            resolveWithFullResponse: true,
            simple: false,
        };
        try {
            const response = yield request(options);
            // The session key will be in the 'set-cookie' header
            const cookies = response.headers["set-cookie"];
            let sessionKey = null;
            // Search for the PHPSESSID cookie
            if (cookies) {
                cookies.forEach((cookie) => {
                    if (cookie.startsWith("PHPSESSID=")) {
                        sessionKey = cookie.split(";")[0].split("=")[1];
                    }
                });
            }
            if (sessionKey) {
                console.log("Session Key:", sessionKey);
            }
            else {
                console.log("Session Key not found");
            }
        }
        catch (err) {
            console.error("Error:", err.message);
        }
    });
}

const teams = new Set([
    "ENGLAND",
    "FRANCE",
    "GERMANY",
    "ITALY",
    "AUSTRIA",
    "RUSSIA",
    "TURKEY",
]);
const totals = { checked: 0, skipped_via: 0, skipped_team: 0 };
function run_game(id, turns) {
    let game = new out_4(out_11.standard.map, []);
    for (let i = 0; i < turns.length; ++i) {
        console.debug(`processing ${i % 2 ? "fall" : "spring"} ${1901 + Math.floor(i / 2)}`);
        let remote = parse_orders(game, turns[i].orders);
        let orders = remote.orders.slice();
        if (orders.find((o) => o.type == "move" && o.requireConvoy)) {
            ++totals.skipped_via;
            console.log(`skipping ${id} - found VIA CONVOY (${totals.skipped_via} total)`);
            return;
        }
        let x = [...game.units].find((u) => !teams.has(u.team));
        if (x) {
            console.log(`skipping ${id} - found team ${x.team} (${totals.skipped_team} total)`);
            ++totals.skipped_team;
            return;
        }
        for (let unit of game.units) {
            let order = orders.find((o) => o.unit == unit);
            if (order)
                continue;
            orders.push(new out_5(unit));
        }
        let local = out_12(orders);
        for (let move of local.resolved) {
            if (!game.units.has(move.unit))
                debugger;
            game.units.delete(move.unit);
            game.units.add(new out_9(move.target, move.unit.type, move.unit.team));
        }
        for (let order of orders) {
            if (order.type == "move") {
                if (local.resolved.includes(order) != remote.resolved.includes(order)) {
                    for (let pair of local.reasons) {
                        console.log(`${pair[0]}: ${pair[1]}`);
                    }
                    console.log(order);
                    debugger;
                    out_12(orders);
                    throw error(`Mismatch in game ${id}`);
                }
            }
        }
        if (local.evicted.length) {
            let evicted = new Set(local.evicted);
            let retreats = parse_retreats(local.evicted, turns[i].retreats);
            for (let retreat of retreats) {
                if (retreat.resolved) {
                    if (retreat.target)
                        game.move(retreat.unit, retreat.target);
                    else
                        game.units.delete(retreat.unit);
                    evicted.delete(retreat.unit);
                }
            }
            for (let unit of evicted) {
                game.units.delete(unit);
            }
        }
        if (i % 2 == 1) {
            let builds = parse_builds(game, turns[i].builds);
            for (let build of builds) {
                if (build.resolved) {
                    if (game.units.has(build.unit))
                        game.units.delete(build.unit);
                    else
                        game.units.add(build.unit);
                }
            }
        }
        for (let region of game.map.regions) {
            let units = [...game.units].filter((u) => u.region == region);
            if (units.length > 1)
                throw error(`Mismatch in game ${id}`);
        }
        if (i === turns.length - 1) {
            console.log("writing to file");
            const newUnits = Array.from(game.units);
            const folderPath = path.join(__dirname, "../../webapp/src/data");
            fs.writeFileSync(folderPath + "/final-state.json", JSON.stringify(newUnits, null, 2));
        }
    }
    ++totals.checked;
}
// async function run() {
//   fs.mkdirpSync("data");
//   fs.mkdirpSync("cache");
//   // run_game(150168, scrape.read_game(fs.readFileSync('data/150168')));
//   let allIds = fs.readdirSync("data");
//   for (let id of allIds) {
//     if (id == "known.json") continue;
//     if (ignored_games.has(parseInt(id))) continue;
//     console.log(`processing game ${id}`);
//     let game = scrape.read_game(fs.readFileSync(`data/${id}`));
//     run_game(parseInt(id), game);
//   }
//   console.log(totals);
// }
let x = global;
if (x.devtoolsFormatters == null)
    x.devtoolsFormatters = [];
x.devtoolsFormatters.push(out_10);
let op = process.argv[2];
const MY_GAME_ID = 221053;
if (op == "scrape")
    console.log("run");
// else if (op == "check") scrape.check();
// // else if (op == "run") run();
// else if (op == "fetch") scrape.fetchGameData();
// else if (op == "test") scrape.fetchSingleGame(MY_GAME_ID);
else if (op == "key")
    getSessionKey();
else if (op == "test") {
    const turns = fetchSingleGame(MY_GAME_ID);
    turns.then((res) => {
        const gameFinal = run_game(MY_GAME_ID, res);
        // console.log(gameFinal);
    });
}
else {
    console.log("unknown or missing command");
}
// module.exports.runFunction = function (phpKey) {
//   const turns = scrape.fetchSingleGame(MY_GAME_ID, phpKey);
//   turns.then((res) => {
//     const gameFinal = run_game(MY_GAME_ID, res);
//   });
// };
const runFunction = function (phpKey) {
    const turns = fetchSingleGame(MY_GAME_ID, phpKey);
    turns.then((res) => {
        const gameFinal = run_game(MY_GAME_ID, res);
    });
};

exports.runFunction = runFunction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
